/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
pub struct xcb_connection_t {
    _unused: [u8; 0],
}
pub type xcb_keysym_t = u32;
pub type xcb_keycode_t = u8;
#[repr(C)]
pub struct _XCBKeySymbols {
    _unused: [u8; 0],
}
pub type xcb_key_symbols_t = _XCBKeySymbols;
extern "C" {
    pub fn xcb_key_symbols_alloc(c: *mut xcb_connection_t) -> *mut xcb_key_symbols_t;
    pub fn xcb_key_symbols_free(syms: *mut xcb_key_symbols_t);
    pub fn xcb_key_symbols_get_keysym(
        syms: *mut xcb_key_symbols_t,
        keycode: xcb_keycode_t,
        col: ::std::os::raw::c_int,
    ) -> xcb_keysym_t;
    #[doc = " @brief Get the keycodes attached to a keysyms.\n There can be several value, so what is returned is an array of keycode\n terminated by XCB_NO_SYMBOL. You are responsible to free it.\n Be aware that this function can be slow. It will convert all\n combinations of all available keycodes to keysyms to find the ones that\n match.\n @param syms Key symbols.\n @param keysym The keysym to look for.\n @return A XCB_NO_SYMBOL terminated array of keycode, or NULL if nothing is found."]
    pub fn xcb_key_symbols_get_keycode(
        syms: *mut xcb_key_symbols_t,
        keysym: xcb_keysym_t,
    ) -> *mut xcb_keycode_t;
}
