/* automatically generated by rust-bindgen 0.69.4 */

pub const IBUS_KEY_BackSpace: u32 = 65288;
pub const IBUS_KEY_Tab: u32 = 65289;
pub const IBUS_KEY_Return: u32 = 65293;
pub const IBUS_KEY_Delete: u32 = 65535;
pub const IBUS_KEY_Home: u32 = 65360;
pub const IBUS_KEY_Insert: u32 = 65379;
pub const IBUS_KEY_KP_Space: u32 = 65408;
pub const IBUS_KEY_KP_Tab: u32 = 65417;
pub const IBUS_KEY_KP_Enter: u32 = 65421;
pub const IBUS_KEY_KP_F1: u32 = 65425;
pub const IBUS_KEY_KP_F2: u32 = 65426;
pub const IBUS_KEY_KP_F3: u32 = 65427;
pub const IBUS_KEY_KP_F4: u32 = 65428;
pub const IBUS_KEY_KP_Home: u32 = 65429;
pub const IBUS_KEY_KP_Left: u32 = 65430;
pub const IBUS_KEY_KP_Up: u32 = 65431;
pub const IBUS_KEY_KP_Right: u32 = 65432;
pub const IBUS_KEY_KP_Down: u32 = 65433;
pub const IBUS_KEY_KP_Prior: u32 = 65434;
pub const IBUS_KEY_KP_Page_Up: u32 = 65434;
pub const IBUS_KEY_KP_Next: u32 = 65435;
pub const IBUS_KEY_KP_Page_Down: u32 = 65435;
pub const IBUS_KEY_KP_End: u32 = 65436;
pub const IBUS_KEY_KP_Begin: u32 = 65437;
pub const IBUS_KEY_KP_Insert: u32 = 65438;
pub const IBUS_KEY_KP_Delete: u32 = 65439;
pub const IBUS_KEY_KP_Equal: u32 = 65469;
pub const IBUS_KEY_KP_Multiply: u32 = 65450;
pub const IBUS_KEY_KP_Add: u32 = 65451;
pub const IBUS_KEY_KP_Separator: u32 = 65452;
pub const IBUS_KEY_KP_Subtract: u32 = 65453;
pub const IBUS_KEY_KP_Decimal: u32 = 65454;
pub const IBUS_KEY_KP_Divide: u32 = 65455;
pub const IBUS_KEY_KP_0: u32 = 65456;
pub const IBUS_KEY_KP_1: u32 = 65457;
pub const IBUS_KEY_KP_2: u32 = 65458;
pub const IBUS_KEY_KP_3: u32 = 65459;
pub const IBUS_KEY_KP_4: u32 = 65460;
pub const IBUS_KEY_KP_5: u32 = 65461;
pub const IBUS_KEY_KP_6: u32 = 65462;
pub const IBUS_KEY_KP_7: u32 = 65463;
pub const IBUS_KEY_KP_8: u32 = 65464;
pub const IBUS_KEY_KP_9: u32 = 65465;
pub const IBUS_KEY_Shift_L: u32 = 65505;
pub const IBUS_KEY_Shift_R: u32 = 65506;
pub const IBUS_KEY_Control_L: u32 = 65507;
pub const IBUS_KEY_Control_R: u32 = 65508;
pub const IBUS_KEY_Caps_Lock: u32 = 65509;
pub const IBUS_KEY_Shift_Lock: u32 = 65510;
pub const IBUS_KEY_Hyper_L: u32 = 65517;
pub const IBUS_KEY_Hyper_R: u32 = 65518;
pub const IBUS_KEY_space: u32 = 32;
pub const IBUS_KEY_0: u32 = 48;
pub const IBUS_KEY_1: u32 = 49;
pub const IBUS_KEY_2: u32 = 50;
pub const IBUS_KEY_3: u32 = 51;
pub const IBUS_KEY_4: u32 = 52;
pub const IBUS_KEY_5: u32 = 53;
pub const IBUS_KEY_6: u32 = 54;
pub const IBUS_KEY_7: u32 = 55;
pub const IBUS_KEY_8: u32 = 56;
pub const IBUS_KEY_9: u32 = 57;
pub const IBUS_KEY_A: u32 = 65;
pub const IBUS_KEY_B: u32 = 66;
pub const IBUS_KEY_C: u32 = 67;
pub const IBUS_KEY_D: u32 = 68;
pub const IBUS_KEY_E: u32 = 69;
pub const IBUS_KEY_F: u32 = 70;
pub const IBUS_KEY_G: u32 = 71;
pub const IBUS_KEY_H: u32 = 72;
pub const IBUS_KEY_I: u32 = 73;
pub const IBUS_KEY_J: u32 = 74;
pub const IBUS_KEY_K: u32 = 75;
pub const IBUS_KEY_L: u32 = 76;
pub const IBUS_KEY_M: u32 = 77;
pub const IBUS_KEY_N: u32 = 78;
pub const IBUS_KEY_O: u32 = 79;
pub const IBUS_KEY_P: u32 = 80;
pub const IBUS_KEY_Q: u32 = 81;
pub const IBUS_KEY_R: u32 = 82;
pub const IBUS_KEY_S: u32 = 83;
pub const IBUS_KEY_T: u32 = 84;
pub const IBUS_KEY_U: u32 = 85;
pub const IBUS_KEY_V: u32 = 86;
pub const IBUS_KEY_W: u32 = 87;
pub const IBUS_KEY_X: u32 = 88;
pub const IBUS_KEY_Y: u32 = 89;
pub const IBUS_KEY_Z: u32 = 90;
pub const IBUS_KEY_a: u32 = 97;
pub const IBUS_KEY_b: u32 = 98;
pub const IBUS_KEY_c: u32 = 99;
pub const IBUS_KEY_d: u32 = 100;
pub const IBUS_KEY_e: u32 = 101;
pub const IBUS_KEY_f: u32 = 102;
pub const IBUS_KEY_g: u32 = 103;
pub const IBUS_KEY_h: u32 = 104;
pub const IBUS_KEY_i: u32 = 105;
pub const IBUS_KEY_j: u32 = 106;
pub const IBUS_KEY_k: u32 = 107;
pub const IBUS_KEY_l: u32 = 108;
pub const IBUS_KEY_m: u32 = 109;
pub const IBUS_KEY_n: u32 = 110;
pub const IBUS_KEY_o: u32 = 111;
pub const IBUS_KEY_p: u32 = 112;
pub const IBUS_KEY_q: u32 = 113;
pub const IBUS_KEY_r: u32 = 114;
pub const IBUS_KEY_s: u32 = 115;
pub const IBUS_KEY_t: u32 = 116;
pub const IBUS_KEY_u: u32 = 117;
pub const IBUS_KEY_v: u32 = 118;
pub const IBUS_KEY_w: u32 = 119;
pub const IBUS_KEY_x: u32 = 120;
pub const IBUS_KEY_y: u32 = 121;
pub const IBUS_KEY_z: u32 = 122;
pub const IBUS_KEY_asciitilde: u32 = 126;
pub const IBUS_KEY_Back: u32 = 269025062;
pub const IBUS_KEY_BackForward: u32 = 269025087;
pub type guint16 = ::core::ffi::c_ushort;
pub type guint32 = ::core::ffi::c_uint;
pub type gchar = ::core::ffi::c_char;
pub type gint = ::core::ffi::c_int;
pub type gboolean = gint;
pub type guint = ::core::ffi::c_uint;
pub type gdouble = f64;
pub type gpointer = *mut ::core::ffi::c_void;
pub type GError = _GError;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GError {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
pub type GList = _GList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GList {
    pub data: gpointer,
    pub next: *mut GList,
    pub prev: *mut GList,
}
pub type GSList = _GSList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSList {
    pub data: gpointer,
    pub next: *mut GSList,
}
pub type gunichar = guint32;
pub type GString = _GString;
#[repr(C)]
pub struct _GString {
    pub str_: *mut gchar,
    pub len: gsize,
    pub allocated_len: gsize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVariant {
    _unused: [u8; 0],
}
pub type GVariant = _GVariant;
pub type GVariantBuilder = _GVariantBuilder;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GVariantBuilder {
    pub _bindgen_opaque_blob: [u64; 16usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union _GVariantBuilder__bindgen_ty_1 {
    pub _bindgen_opaque_blob: [u64; 16usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GVariantBuilder__bindgen_ty_1__bindgen_ty_1 {
    pub _bindgen_opaque_blob: [u64; 16usize],
}
pub type GType = gsize;
pub type GObject = _GObject;
pub type GInitiallyUnowned = _GObject;
pub type GInitiallyUnownedClass = _GObjectClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GObject {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GObjectClass {
    pub _bindgen_opaque_blob: [u64; 17usize],
}
pub const IBUS_SHIFT_MASK: IBusModifierType = 1;
pub const IBUS_LOCK_MASK: IBusModifierType = 2;
pub const IBUS_CONTROL_MASK: IBusModifierType = 4;
pub const IBUS_MOD1_MASK: IBusModifierType = 8;
pub const IBUS_MOD2_MASK: IBusModifierType = 16;
pub const IBUS_MOD3_MASK: IBusModifierType = 32;
pub const IBUS_MOD4_MASK: IBusModifierType = 64;
pub const IBUS_MOD5_MASK: IBusModifierType = 128;
pub const IBUS_BUTTON1_MASK: IBusModifierType = 256;
pub const IBUS_BUTTON2_MASK: IBusModifierType = 512;
pub const IBUS_BUTTON3_MASK: IBusModifierType = 1024;
pub const IBUS_BUTTON4_MASK: IBusModifierType = 2048;
pub const IBUS_BUTTON5_MASK: IBusModifierType = 4096;
pub const IBUS_HANDLED_MASK: IBusModifierType = 16777216;
pub const IBUS_FORWARD_MASK: IBusModifierType = 33554432;
pub const IBUS_IGNORED_MASK: IBusModifierType = 33554432;
pub const IBUS_SUPER_MASK: IBusModifierType = 67108864;
pub const IBUS_HYPER_MASK: IBusModifierType = 134217728;
pub const IBUS_META_MASK: IBusModifierType = 268435456;
pub const IBUS_RELEASE_MASK: IBusModifierType = 1073741824;
pub const IBUS_MODIFIER_MASK: IBusModifierType = 1593843711;
pub type IBusModifierType = ::core::ffi::c_uint;
pub const IBUS_CAP_PREEDIT_TEXT: IBusCapabilite = 1;
pub const IBUS_CAP_AUXILIARY_TEXT: IBusCapabilite = 2;
pub const IBUS_CAP_LOOKUP_TABLE: IBusCapabilite = 4;
pub const IBUS_CAP_FOCUS: IBusCapabilite = 8;
pub const IBUS_CAP_PROPERTY: IBusCapabilite = 16;
pub const IBUS_CAP_SURROUNDING_TEXT: IBusCapabilite = 32;
pub type IBusCapabilite = ::core::ffi::c_uint;
pub const IBUS_ENGINE_PREEDIT_CLEAR: IBusPreeditFocusMode = 0;
pub const IBUS_ENGINE_PREEDIT_COMMIT: IBusPreeditFocusMode = 1;
pub type IBusPreeditFocusMode = ::core::ffi::c_uint;
pub const IBUS_ORIENTATION_HORIZONTAL: IBusOrientation = 0;
pub const IBUS_ORIENTATION_VERTICAL: IBusOrientation = 1;
pub const IBUS_ORIENTATION_SYSTEM: IBusOrientation = 2;
pub type IBusOrientation = ::core::ffi::c_uint;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IBusBusNameFlag {
    IBUS_BUS_NAME_FLAG_ALLOW_REPLACEMENT = 1,
    IBUS_BUS_NAME_FLAG_REPLACE_EXISTING = 2,
    IBUS_BUS_NAME_FLAG_DO_NOT_QUEUE = 4,
}
pub const IBUS_BUS_REQUEST_NAME_REPLY_PRIMARY_OWNER: IBusBusRequestNameReply = 1;
pub const IBUS_BUS_REQUEST_NAME_REPLY_IN_QUEUE: IBusBusRequestNameReply = 2;
pub const IBUS_BUS_REQUEST_NAME_REPLY_EXISTS: IBusBusRequestNameReply = 3;
pub const IBUS_BUS_REQUEST_NAME_REPLY_ALREADY_OWNER: IBusBusRequestNameReply = 4;
pub type IBusBusRequestNameReply = ::core::ffi::c_uint;
pub const IBUS_BUS_START_REPLY_SUCCESS: IBusBusStartServiceByNameReply = 1;
pub const IBUS_BUS_START_REPLY_ALREADY_RUNNING: IBusBusStartServiceByNameReply = 2;
pub type IBusBusStartServiceByNameReply = ::core::ffi::c_uint;
pub const IBUS_ERROR_NO_ENGINE: IBusError = 0;
pub const IBUS_ERROR_NO_CONFIG: IBusError = 1;
pub const IBUS_ERROR_FAILED: IBusError = 2;
pub type IBusError = ::core::ffi::c_uint;
pub type IBusRectangle = _IBusRectangle;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusRectangle {
    pub _bindgen_opaque_blob: [u32; 4usize],
}
pub type IBusFreeFunc = ::core::option::Option<unsafe extern "C" fn(object: gpointer)>;
pub const IBUS_INPUT_PURPOSE_FREE_FORM: IBusInputPurpose = 0;
pub const IBUS_INPUT_PURPOSE_ALPHA: IBusInputPurpose = 1;
pub const IBUS_INPUT_PURPOSE_DIGITS: IBusInputPurpose = 2;
pub const IBUS_INPUT_PURPOSE_NUMBER: IBusInputPurpose = 3;
pub const IBUS_INPUT_PURPOSE_PHONE: IBusInputPurpose = 4;
pub const IBUS_INPUT_PURPOSE_URL: IBusInputPurpose = 5;
pub const IBUS_INPUT_PURPOSE_EMAIL: IBusInputPurpose = 6;
pub const IBUS_INPUT_PURPOSE_NAME: IBusInputPurpose = 7;
pub const IBUS_INPUT_PURPOSE_PASSWORD: IBusInputPurpose = 8;
pub const IBUS_INPUT_PURPOSE_PIN: IBusInputPurpose = 9;
pub const IBUS_INPUT_PURPOSE_TERMINAL: IBusInputPurpose = 10;
pub type IBusInputPurpose = ::core::ffi::c_uint;
pub const IBUS_INPUT_HINT_NONE: IBusInputHints = 0;
pub const IBUS_INPUT_HINT_SPELLCHECK: IBusInputHints = 1;
pub const IBUS_INPUT_HINT_NO_SPELLCHECK: IBusInputHints = 2;
pub const IBUS_INPUT_HINT_WORD_COMPLETION: IBusInputHints = 4;
pub const IBUS_INPUT_HINT_LOWERCASE: IBusInputHints = 8;
pub const IBUS_INPUT_HINT_UPPERCASE_CHARS: IBusInputHints = 16;
pub const IBUS_INPUT_HINT_UPPERCASE_WORDS: IBusInputHints = 32;
pub const IBUS_INPUT_HINT_UPPERCASE_SENTENCES: IBusInputHints = 64;
pub const IBUS_INPUT_HINT_INHIBIT_OSK: IBusInputHints = 128;
pub const IBUS_INPUT_HINT_VERTICAL_WRITING: IBusInputHints = 256;
pub const IBUS_INPUT_HINT_EMOJI: IBusInputHints = 512;
pub const IBUS_INPUT_HINT_NO_EMOJI: IBusInputHints = 1024;
pub const IBUS_INPUT_HINT_PRIVATE: IBusInputHints = 2048;
pub type IBusInputHints = ::core::ffi::c_uint;
pub const IBUS_IN_DESTRUCTION: IBusObjectFlags = 1;
pub const IBUS_DESTROYED: IBusObjectFlags = 2;
pub const IBUS_RESERVED_1: IBusObjectFlags = 4;
pub const IBUS_RESERVED_2: IBusObjectFlags = 8;
pub type IBusObjectFlags = ::core::ffi::c_uint;
pub type IBusObject = _IBusObject;
pub type IBusObjectClass = _IBusObjectClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusObjectPrivate {
    _unused: [u8; 0],
}
pub type IBusObjectPrivate = _IBusObjectPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusObject {
    pub parent: GInitiallyUnowned,
    pub flags: guint32,
    pub priv_: *mut IBusObjectPrivate,
}
pub type IBusObjectDestroyFunc = ::core::option::Option<unsafe extern "C" fn(object: *mut IBusObject)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusObjectClass {
    pub parent: GInitiallyUnownedClass,
    pub destroy: ::core::option::Option<unsafe extern "C" fn(object: *mut IBusObject)>,
    pub pdummy: [gpointer; 7usize],
}
pub const IBUS_ATTR_TYPE_UNDERLINE: IBusAttrType = 1;
pub const IBUS_ATTR_TYPE_FOREGROUND: IBusAttrType = 2;
pub const IBUS_ATTR_TYPE_BACKGROUND: IBusAttrType = 3;
pub type IBusAttrType = ::core::ffi::c_uint;
pub const IBUS_ATTR_UNDERLINE_NONE: IBusAttrUnderline = 0;
pub const IBUS_ATTR_UNDERLINE_SINGLE: IBusAttrUnderline = 1;
pub const IBUS_ATTR_UNDERLINE_DOUBLE: IBusAttrUnderline = 2;
pub const IBUS_ATTR_UNDERLINE_LOW: IBusAttrUnderline = 3;
pub const IBUS_ATTR_UNDERLINE_ERROR: IBusAttrUnderline = 4;
pub type IBusAttrUnderline = ::core::ffi::c_uint;
pub type IBusAttribute = _IBusAttribute;
pub type IBusAttributeClass = _IBusAttributeClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusAttribute {
    pub _bindgen_opaque_blob: [u64; 8usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusAttributeClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub type IBusAttrList = _IBusAttrList;
pub type IBusAttrListClass = _IBusAttrListClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusAttrList {
    pub _bindgen_opaque_blob: [u64; 7usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusAttrListClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub type IBusText = _IBusText;
pub type IBusTextClass = _IBusTextClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusText {
    pub _bindgen_opaque_blob: [u64; 9usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusTextClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusConnection {
    _unused: [u8; 0],
}
pub type GDBusConnection = _GDBusConnection;
pub type IBusProxy = _IBusProxy;
pub type IBusProxyClass = _IBusProxyClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusProxy {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusProxyClass {
    pub _bindgen_opaque_blob: [u64; 59usize],
}
pub type IBusService = _IBusService;
pub type IBusServiceClass = _IBusServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusServicePrivate {
    _unused: [u8; 0],
}
pub type IBusServicePrivate = _IBusServicePrivate;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusService {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusServiceClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub type IBusLookupTable = _IBusLookupTable;
pub type IBusLookupTableClass = _IBusLookupTableClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusLookupTable {
    pub _bindgen_opaque_blob: [u64; 11usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusLookupTableClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub const PROP_TYPE_NORMAL: IBusPropType = 0;
pub const PROP_TYPE_TOGGLE: IBusPropType = 1;
pub const PROP_TYPE_RADIO: IBusPropType = 2;
pub const PROP_TYPE_MENU: IBusPropType = 3;
pub const PROP_TYPE_SEPARATOR: IBusPropType = 4;
pub type IBusPropType = ::core::ffi::c_uint;
pub const PROP_STATE_UNCHECKED: IBusPropState = 0;
pub const PROP_STATE_CHECKED: IBusPropState = 1;
pub const PROP_STATE_INCONSISTENT: IBusPropState = 2;
pub type IBusPropState = ::core::ffi::c_uint;
pub type IBusProperty = _IBusProperty;
pub type IBusPropertyClass = _IBusPropertyClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusPropertyPrivate {
    _unused: [u8; 0],
}
pub type IBusPropertyPrivate = _IBusPropertyPrivate;
pub type IBusPropList = _IBusPropList;
pub type IBusPropListClass = _IBusPropListClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusProperty {
    pub _bindgen_opaque_blob: [u64; 14usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusPropertyClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusPropList {
    pub _bindgen_opaque_blob: [u64; 7usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusPropListClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub type IBusEngine = _IBusEngine;
pub type IBusEngineClass = _IBusEngineClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusEnginePrivate {
    _unused: [u8; 0],
}
pub type IBusEnginePrivate = _IBusEnginePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusEngine {
    pub parent: IBusService,
    pub priv_: *mut IBusEnginePrivate,
    pub enabled: gboolean,
    pub has_focus: gboolean,
    pub cursor_area: IBusRectangle,
    pub client_capabilities: guint,
}
#[repr(C)]
pub struct _IBusEngineClass {
    pub parent: IBusServiceClass,
    pub process_key_event: ::core::option::Option<
        unsafe extern "C" fn(engine: *mut IBusEngine, keyval: guint, keycode: guint, state: guint) -> gboolean,
    >,
    pub focus_in: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub focus_out: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub reset: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub enable: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub disable: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub set_cursor_location:
        ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine, x: gint, y: gint, w: gint, h: gint)>,
    pub set_capabilities: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine, caps: guint)>,
    pub page_up: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub page_down: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub cursor_up: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub cursor_down: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine)>,
    pub property_activate: ::core::option::Option<
        unsafe extern "C" fn(engine: *mut IBusEngine, prop_name: *const gchar, prop_state: guint),
    >,
    pub property_show: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine, prop_name: *const gchar)>,
    pub property_hide: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine, prop_name: *const gchar)>,
    pub candidate_clicked: ::core::option::Option<
        unsafe extern "C" fn(engine: *mut IBusEngine, index: guint, button: guint, state: guint),
    >,
    pub set_surrounding_text: ::core::option::Option<
        unsafe extern "C" fn(engine: *mut IBusEngine, text: *mut IBusText, cursor_index: guint, anchor_pos: guint),
    >,
    pub process_hand_writing_event: ::core::option::Option<
        unsafe extern "C" fn(engine: *mut IBusEngine, coordinates: *const gdouble, coordinates_len: guint),
    >,
    pub cancel_hand_writing: ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine, n_strokes: guint)>,
    pub set_content_type:
        ::core::option::Option<unsafe extern "C" fn(engine: *mut IBusEngine, purpose: guint, hints: guint)>,
    pub pdummy: [gpointer; 4usize],
}
pub type IBusFactory = _IBusFactory;
pub type IBusFactoryClass = _IBusFactoryClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusFactoryPrivate {
    _unused: [u8; 0],
}
pub type IBusFactoryPrivate = _IBusFactoryPrivate;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusFactory {
    pub _bindgen_opaque_blob: [u64; 7usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusFactoryClass {
    pub _bindgen_opaque_blob: [u64; 41usize],
}
pub type IBusEngineSimple = _IBusEngineSimple;
pub type IBusEngineSimpleClass = _IBusEngineSimpleClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusEngineSimplePrivate {
    _unused: [u8; 0],
}
pub type IBusEngineSimplePrivate = _IBusEngineSimplePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusEngineSimple {
    pub parent: IBusEngine,
    pub priv_: *mut IBusEngineSimplePrivate,
}
#[repr(C)]
pub struct _IBusEngineSimpleClass {
    pub parent: IBusEngineClass,
    pub pdummy: [gpointer; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IBusXML {
    pub name: *mut gchar,
    pub text: *mut gchar,
    pub attributes: *mut *mut gchar,
    pub sub_nodes: *mut GList,
}
pub type IBusEngineDesc = _IBusEngineDesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusEngineDescPrivate {
    _unused: [u8; 0],
}
pub type IBusEngineDescPrivate = _IBusEngineDescPrivate;
pub type IBusEngineDescClass = _IBusEngineDescClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusEngineDesc {
    pub _bindgen_opaque_blob: [u64; 7usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusEngineDescClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub type IBusInputContext = _IBusInputContext;
pub type IBusInputContextClass = _IBusInputContextClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusInputContext {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusInputContextClass {
    pub _bindgen_opaque_blob: [u64; 83usize],
}
pub type IBusConfig = _IBusConfig;
pub type IBusConfigClass = _IBusConfigClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusConfigPrivate {
    _unused: [u8; 0],
}
pub type IBusConfigPrivate = _IBusConfigPrivate;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusConfig {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusConfigClass {
    pub _bindgen_opaque_blob: [u64; 59usize],
}
pub type IBusObservedPath = _IBusObservedPath;
pub type IBusObservedPathClass = _IBusObservedPathClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusObservedPath {
    pub _bindgen_opaque_blob: [u64; 9usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusObservedPathClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub type IBusComponent = _IBusComponent;
pub type IBusComponentClass = _IBusComponentClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusComponentPrivate {
    _unused: [u8; 0],
}
pub type IBusComponentPrivate = _IBusComponentPrivate;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusComponent {
    pub _bindgen_opaque_blob: [u64; 14usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusComponentClass {
    pub _bindgen_opaque_blob: [u64; 33usize],
}
pub type IBusBus = _IBusBus;
pub type IBusBusClass = _IBusBusClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IBusBusPrivate {
    _unused: [u8; 0],
}
pub type IBusBusPrivate = _IBusBusPrivate;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusBus {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusBusClass {
    pub _bindgen_opaque_blob: [u64; 25usize],
}
pub type IBusConfigService = _IBusConfigService;
pub type IBusConfigServiceClass = _IBusConfigServiceClass;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusConfigService {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[repr(C)]
#[repr(align(8))]
pub struct _IBusConfigServiceClass {
    pub _bindgen_opaque_blob: [u64; 49usize],
}
pub type IBusProcessKeyEventData = _IBusProcessKeyEventData;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IBusProcessKeyEventData {
    pub _bindgen_opaque_blob: [u32; 3usize],
}
extern "C" {
    pub fn g_list_free(list: *mut GList);
    pub fn ibus_init();
    pub fn ibus_main();
    pub fn ibus_quit();
    pub fn ibus_text_get_type() -> GType;
    pub fn ibus_text_new_from_string(str_: *const gchar) -> *mut IBusText;
    pub fn ibus_text_new_from_ucs4(str_: *const gunichar) -> *mut IBusText;
    pub fn ibus_text_new_from_static_string(str_: *const gchar) -> *mut IBusText;
    pub fn ibus_text_new_from_printf(fmt: *const gchar, ...) -> *mut IBusText;
    pub fn ibus_text_new_from_unichar(c: gunichar) -> *mut IBusText;
    pub fn ibus_text_append_attribute(
        text: *mut IBusText,
        type_: guint,
        value: guint,
        start_index: guint,
        end_index: gint,
    );
    pub fn ibus_text_get_length(text: *mut IBusText) -> guint;
    pub fn ibus_text_get_is_static(text: *mut IBusText) -> gboolean;
    pub fn ibus_text_get_text(text: *mut IBusText) -> *const gchar;
    pub fn ibus_text_get_attributes(text: *mut IBusText) -> *mut IBusAttrList;
    pub fn ibus_text_set_attributes(text: *mut IBusText, attrs: *mut IBusAttrList);
    pub fn ibus_engine_get_type() -> GType;
    pub fn ibus_engine_new(
        engine_name: *const gchar,
        object_path: *const gchar,
        connection: *mut GDBusConnection,
    ) -> *mut IBusEngine;
    pub fn ibus_engine_new_with_type(
        engine_type: GType,
        engine_name: *const gchar,
        object_path: *const gchar,
        connection: *mut GDBusConnection,
    ) -> *mut IBusEngine;
    pub fn ibus_engine_commit_text(engine: *mut IBusEngine, text: *mut IBusText);
    pub fn ibus_engine_update_preedit_text(
        engine: *mut IBusEngine,
        text: *mut IBusText,
        cursor_pos: guint,
        visible: gboolean,
    );
    pub fn ibus_engine_update_preedit_text_with_mode(
        engine: *mut IBusEngine,
        text: *mut IBusText,
        cursor_pos: guint,
        visible: gboolean,
        mode: IBusPreeditFocusMode,
    );
    pub fn ibus_engine_show_preedit_text(engine: *mut IBusEngine);
    pub fn ibus_engine_hide_preedit_text(engine: *mut IBusEngine);
    pub fn ibus_engine_update_auxiliary_text(engine: *mut IBusEngine, text: *mut IBusText, visible: gboolean);
    pub fn ibus_engine_show_auxiliary_text(engine: *mut IBusEngine);
    pub fn ibus_engine_hide_auxiliary_text(engine: *mut IBusEngine);
    pub fn ibus_engine_update_lookup_table(
        engine: *mut IBusEngine,
        lookup_table: *mut IBusLookupTable,
        visible: gboolean,
    );
    pub fn ibus_engine_update_lookup_table_fast(
        engine: *mut IBusEngine,
        lookup_table: *mut IBusLookupTable,
        visible: gboolean,
    );
    pub fn ibus_engine_show_lookup_table(engine: *mut IBusEngine);
    pub fn ibus_engine_hide_lookup_table(engine: *mut IBusEngine);
    pub fn ibus_engine_forward_key_event(engine: *mut IBusEngine, keyval: guint, keycode: guint, state: guint);
    pub fn ibus_engine_register_properties(engine: *mut IBusEngine, prop_list: *mut IBusPropList);
    pub fn ibus_engine_update_property(engine: *mut IBusEngine, prop: *mut IBusProperty);
    pub fn ibus_engine_delete_surrounding_text(engine: *mut IBusEngine, offset: gint, nchars: guint);
    pub fn ibus_engine_get_surrounding_text(
        engine: *mut IBusEngine,
        text: *mut *mut IBusText,
        cursor_pos: *mut guint,
        anchor_pos: *mut guint,
    );
    pub fn ibus_engine_get_content_type(engine: *mut IBusEngine, purpose: *mut guint, hints: *mut guint);
    pub fn ibus_engine_get_name(engine: *mut IBusEngine) -> *const gchar;
    pub fn ibus_factory_get_type() -> GType;
    pub fn ibus_factory_new(connection: *mut GDBusConnection) -> *mut IBusFactory;
    pub fn ibus_factory_add_engine(factory: *mut IBusFactory, engine_name: *const gchar, engine_type: GType);
    pub fn ibus_factory_create_engine(factory: *mut IBusFactory, engine_name: *const gchar) -> *mut IBusEngine;
    pub fn ibus_engine_simple_get_type() -> GType;
    pub fn ibus_engine_simple_add_table(
        simple: *mut IBusEngineSimple,
        data: *const guint16,
        max_seq_len: gint,
        n_seqs: gint,
    );
    pub fn ibus_engine_simple_add_table_by_locale(simple: *mut IBusEngineSimple, locale: *const gchar) -> gboolean;
    pub fn ibus_engine_simple_add_compose_file(simple: *mut IBusEngineSimple, file: *const gchar) -> gboolean;
    pub fn ibus_engine_desc_get_type() -> GType;
    pub fn ibus_engine_desc_new(
        name: *const gchar,
        longname: *const gchar,
        description: *const gchar,
        language: *const gchar,
        license: *const gchar,
        author: *const gchar,
        icon: *const gchar,
        layout: *const gchar,
    ) -> *mut IBusEngineDesc;
    pub fn ibus_engine_desc_new_varargs(first_property_name: *const gchar, ...) -> *mut IBusEngineDesc;
    pub fn ibus_engine_desc_new_from_xml_node(node: *mut IBusXML) -> *mut IBusEngineDesc;
    pub fn ibus_engine_desc_get_name(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_longname(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_description(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_language(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_license(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_author(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_icon(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_layout(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_layout_variant(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_layout_option(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_rank(info: *mut IBusEngineDesc) -> guint;
    pub fn ibus_engine_desc_get_hotkeys(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_symbol(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_setup(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_version(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_textdomain(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_get_icon_prop_key(info: *mut IBusEngineDesc) -> *const gchar;
    pub fn ibus_engine_desc_output(info: *mut IBusEngineDesc, output: *mut GString, indent: gint);
    pub fn ibus_component_get_type() -> GType;
    pub fn ibus_component_new(
        name: *const gchar,
        description: *const gchar,
        version: *const gchar,
        license: *const gchar,
        author: *const gchar,
        homepage: *const gchar,
        command_line: *const gchar,
        textdomain: *const gchar,
    ) -> *mut IBusComponent;
    pub fn ibus_component_new_varargs(first_property_name: *const gchar, ...) -> *mut IBusComponent;
    pub fn ibus_component_new_from_xml_node(node: *mut IBusXML) -> *mut IBusComponent;
    pub fn ibus_component_new_from_file(filename: *const gchar) -> *mut IBusComponent;
    pub fn ibus_component_get_name(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_get_description(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_get_version(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_get_license(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_get_author(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_get_homepage(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_get_exec(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_get_textdomain(component: *mut IBusComponent) -> *const gchar;
    pub fn ibus_component_add_observed_path(component: *mut IBusComponent, path: *const gchar, access_fs: gboolean);
    pub fn ibus_component_add_engine(component: *mut IBusComponent, engine: *mut IBusEngineDesc);
    pub fn ibus_component_get_engines(component: *mut IBusComponent) -> *mut GList;
    pub fn ibus_component_output(component: *mut IBusComponent, output: *mut GString, indent: gint);
    pub fn ibus_component_output_engines(component: *mut IBusComponent, output: *mut GString, indent: gint);
    pub fn ibus_component_check_modification(component: *mut IBusComponent) -> gboolean;
    pub fn ibus_component_get_observed_paths(component: *mut IBusComponent) -> *mut GList;
    pub fn ibus_bus_get_type() -> GType;
    pub fn ibus_bus_new() -> *mut IBusBus;
    pub fn ibus_bus_is_connected(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_get_connection(bus: *mut IBusBus) -> *mut GDBusConnection;
    pub fn ibus_bus_get_service_name(bus: *mut IBusBus) -> *const gchar;
    pub fn ibus_bus_hello(bus: *mut IBusBus) -> *const gchar;
    pub fn ibus_bus_request_name(bus: *mut IBusBus, name: *const gchar, flags: guint32) -> guint32;
    pub fn ibus_bus_release_name(bus: *mut IBusBus, name: *const gchar) -> guint;
    pub fn ibus_bus_list_queued_owners(bus: *mut IBusBus, name: *const gchar) -> *mut GList;
    pub fn ibus_bus_name_has_owner(bus: *mut IBusBus, name: *const gchar) -> gboolean;
    pub fn ibus_bus_list_names(bus: *mut IBusBus) -> *mut GList;
    pub fn ibus_bus_add_match(bus: *mut IBusBus, rule: *const gchar) -> gboolean;
    pub fn ibus_bus_remove_match(bus: *mut IBusBus, rule: *const gchar) -> gboolean;
    pub fn ibus_bus_get_name_owner(bus: *mut IBusBus, name: *const gchar) -> *mut gchar;
    pub fn ibus_bus_exit(bus: *mut IBusBus, restart: gboolean) -> gboolean;
    pub fn ibus_bus_create_input_context(bus: *mut IBusBus, client_name: *const gchar) -> *mut IBusInputContext;
    pub fn ibus_bus_current_input_context(bus: *mut IBusBus) -> *mut gchar;
    pub fn ibus_bus_register_component(bus: *mut IBusBus, component: *mut IBusComponent) -> gboolean;
    pub fn ibus_bus_list_engines(bus: *mut IBusBus) -> *mut GList;
    pub fn ibus_bus_list_active_engines(bus: *mut IBusBus) -> *mut GList;
    pub fn ibus_bus_get_engines_by_names(bus: *mut IBusBus, names: *const *const gchar) -> *mut *mut IBusEngineDesc;
    pub fn ibus_bus_get_use_sys_layout(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_get_use_global_engine(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_is_global_engine_enabled(bus: *mut IBusBus) -> gboolean;
    pub fn ibus_bus_get_global_engine(bus: *mut IBusBus) -> *mut IBusEngineDesc;
    pub fn ibus_bus_set_global_engine(bus: *mut IBusBus, global_engine: *const gchar) -> gboolean;
    pub fn ibus_bus_set_watch_dbus_signal(bus: *mut IBusBus, watch: gboolean);
    pub fn ibus_bus_set_watch_ibus_signal(bus: *mut IBusBus, watch: gboolean);
    pub fn ibus_bus_get_config(bus: *mut IBusBus) -> *mut IBusConfig;
    pub fn ibus_bus_preload_engines(bus: *mut IBusBus, names: *const *const gchar) -> gboolean;
    pub fn ibus_bus_get_ibus_property(bus: *mut IBusBus, property_name: *const gchar) -> *mut GVariant;
    pub fn ibus_bus_set_ibus_property(bus: *mut IBusBus, property_name: *const gchar, value: *mut GVariant);
    pub fn ibus_bus_name_flag_get_type() -> GType;
    pub fn ibus_bus_request_name_reply_get_type() -> GType;
    pub fn ibus_bus_start_service_by_name_reply_get_type() -> GType;
}
pub type gsize = usize;
pub const FALSE: gboolean = 0;
pub const TRUE: gboolean = !FALSE;
